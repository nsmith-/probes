#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Wen Guan, <wguan@cern.ch>, 2014
# - Eric Vaandering, <ewv@fnal.gov>, 2019

"""
Probe to check requests.
"""

import datetime
import sys
import time

from rucio.core import monitor, rse
from rucio.db.sqla.session import BASE, get_session

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":
    debug = False
    if "-d" in sys.argv:
        debug = True

    scope = "cms"

    try:
        session = get_session()
        utctime = datetime.datetime.utcnow()
        utctimeInt = int(time.mktime(utctime.timetuple()))
        timeEnd = utctimeInt
        timezoneoffset = int((datetime.datetime.now() - datetime.datetime.utcnow()).seconds)

        # check requests to different sites
        sql = "select /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ {schema}rses.rse rse, state, count(*) \
               from {schema}requests join {schema}rses on requests.dest_rse_id = rses.id where request_type='T' group by rse, state".format(schema=schema)
        result = session.execute(sql).fetchall()
        for rse, state, num in result:
            if debug:
                print "requests.all.%s.%s %s" % (state, rse, num)
            monitor.record_gauge(stat='%s.requests.all.%s.%s' % (scope, state, rse), value=num)

        ages = {
            '12Hours': datetime.timedelta(hours=12),
            '24Hours': datetime.timedelta(hours=12),
            '48Hours': datetime.timedelta(hours=48),
            '7Days': datetime.timedelta(days=7),
        }
        for aname, adelta in ages.items():
            # check left requests which are more than X old to different sites
            timeLimit = datetime.datetime.utcnow() - adelta
            sql = "select /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ {schema}rses.rse rse, state, count(*) \
                from {schema}requests join {schema}rses on requests.dest_rse_id = rses.id where request_type='T' and requests.created_at<=to_timestamp('".format(schema=schema) \
                + str(timeLimit) + "','YYYY-MM-dd HH24:MI:SS.FF') group by rse, state".format(schema=schema)
            result = session.execute(sql).fetchall()
            for rse, state, num in result:
                if debug:
                    print "requests.%s.%s.%s %s" % (state, aname, rse, num)
                monitor.record_gauge(stat='%s.requests.%s.%s.%s' % (scope, aname, state, rse), value=num)

    except:
        if debug:
            raise
        sys.exit(UNKNOWN)
    finally:
        session.remove()
    sys.exit(OK)
